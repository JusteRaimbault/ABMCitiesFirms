import java.text.SimpleDateFormat
import java.util.Date

val setupScalingExponent = Val[Double]
val setupSectorsNumber = Val[Int]
val setupSectorsMode = Val[String]

val finalTime = Val[Int]

val gammaOrigin = Val[Double]
val gammaDestination = Val[Double]
val gammaLinks = Val[Double]
val gammaSectors = Val[Double]
val gravityDecay = Val[Double]
val countryGravityDecay = Val[Double]

// indicators
val internationalization = Val[Double]
val metropolization = Val[Double]
val networkModularity = Val[Double]
val networkAvgCommunitySize = Val[Double]
val networkAvgDegree = Val[Double]
val networkDegreeEntropy = Val[Double]
val flowsEntropy = Val[Double]
val firmLinks = Val[Double]

val replication = Val[Int]

val cmds = Seq("experiments:setup-experiment \"synthetic\" ${setupScalingExponent} ${setupSectorsNumber} \"${setupSectorsMode}\" ${finalTime} "+
  "${gammaOrigin} ${gammaDestination} ${gammaLinks} ${gammaSectors} ${gravityDecay} ${countryGravityDecay} (random 100000)"//${replication}"
,"experiments:run-experiment")

val model = NetLogo6Task(workDirectory / "HEADLESS_CitiesFirms.nlogo",cmds,embedWorkspace=true,reuseWorkspace=true) set (
    inputs += (setupScalingExponent,setupSectorsNumber,setupSectorsMode,finalTime,gammaOrigin,gammaDestination,gammaLinks,gammaSectors,
      gravityDecay,countryGravityDecay/*,replication*/),
    outputs += internationalization mapped "indicators:internationalization",
    outputs += metropolization mapped "indicators:metropolization",
    outputs += networkModularity mapped "indicators:network-weighted-louvain-modularity",
    outputs += networkAvgCommunitySize mapped "indicators:network-average-community-size",
    outputs += networkAvgDegree mapped "indicators:network-average-weighted-degree",
    outputs += networkDegreeEntropy mapped "indicators:network-weighted-degree-distribution-entropy",
    outputs += flowsEntropy mapped "indicators:flows-distribution-entropy",
    outputs += firmLinks mapped "count firmlinks",
    setupScalingExponent := 1.1,
    setupSectorsNumber := 50,
    setupSectorsMode := "log-normal",
    finalTime := 5000
)

//val purpose = "SALTELLI_SYNTHETIC_GRID"
val purpose = "SALTELLI_TEST"

//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2000 megabytes)
val env = LocalEnvironment(5)

/*
// ! should aggregate for the Saltelli to work on replications -> use on stochastic model with large number of samples.
val replications = Replication (
   //evaluation = (model on env by 20),
   evaluation = (model on env),
   seed = replication,
   //replications = 100
   replications = 1
)
*/

val resdir = workDirectory / "sensitivity" / (((new java.text.SimpleDateFormat("yyyyMMdd_HHmmss")).format(new java.util.Date()))+"_"+purpose)


SensitivitySaltelli( 
  evaluation = (model on env),//replications,
  samples = 5,
  inputs = Seq(
    gravityDecay in (100.0,5100.0),
    countryGravityDecay in (100.0,5100.0),
    gammaSectors in (0.1,2.0),
    gammaLinks in (0.1,2.0),
    gammaOrigin in (0.1,2.0),
    gammaDestination in (0.1,2.0)
  ),
  outputs = Seq(internationalization, metropolization, networkModularity, networkAvgCommunitySize, networkAvgDegree, networkDegreeEntropy, flowsEntropy, firmLinks)
) hook (resdir)




