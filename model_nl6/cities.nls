


;;
; evolve city size and structure at the macroscopic level
to cities:evolve-cities
  
  ; switch the current date
  
  
  if cities:structure-evolution-mode = "fixed" [
    ; do nothing - baseline 
  ]
  
  if cities:structure-evolution-mode = "size-interactions" [
    ; TODO 
    
    
    cities:compute-link-utility-matrix
  ]
  
end







;;
; kmeans geographical setup for countries
;
to cities:set-countries-clustering
  
  ask cities [set city:feature (list xcor ycor)]
  
  let clusters kmeans:cluster-by-feature cities setup:countries-number 1000 0.01 "city:feature"
  ;let colors sublist base-colors 0 setup:countries-number ; not enough base colors
  let k 0
  (foreach clusters [;colors [
    ;[cluster col] -> ask cluster [set color col set city:country k] set k k + 1
    cluster -> ask cluster [set city:country k] set k k + 1
  ])
  
end


;;
; synthetic sector composition for cities
to cities:setup-synthetic-sectors-composition
  
  set runtime:max-gdp max [city:gdp] of cities
  set runtime:min-gdp min [city:gdp] of cities
  
  ask cities [
    set city:sector-composition city:initial-sector-composition
  ]
    
end


;;
; real sector composition - static at t=0 only
to cities:setup-real-sectors-or-size [with-size?]
  let dates map [? -> item 1 ?] setup:cities-data
  let t0 min dates
  foreach setup:cities-data [row ->
    if item 1 row = t0 [
      let id item 0 row
      let sectors sublist row 6 (length row)
      ask one-of cities with [city:number = id][
        set city:sector-composition sectors
        if with-size? [
          set city:gdp item 5 row
        ]
      ]
    ] 
  ]  
end

;;
; full real data
to cities:setup-real-cities
  let dates remove-duplicates map [? -> read-from-string (item 2 ?)] setup:cities-data
  set runtime:dates sort dates
  set runtime:current-date-index 0 ; not fully appropriate to do it here
  let t0 min dates
  let cities-numbers remove-duplicates map [? -> read-from-string (item 0 ?)] setup:cities-data
  foreach cities-numbers [n -> create-cities 1 [set city:number n set shape "circle" set city:historical-gdp utils:list:rep 0 (length dates) set city:historical-sectors utils:list:rep [] (length dates)]]

  foreach setup:cities-data [row ->
    ;show row
    let id read-from-string (item 0 row)
    let name (item 1 row)
    let t read-from-string (item 2 row)
    let x city:rescale-x read-from-string (item 3 row)
    let y city:rescale-y read-from-string (item 4 row)
    let country read-from-string (item 5 row)
    let gdp read-from-string (item 6 row)
    let sectors map [? -> read-from-string ?] (sublist row 6 (length row))
    if t = t0 [
      ask one-of cities with [city:number = id][
        set city:name name
        set city:sector-composition sectors
        set city:gdp gdp
        set city:country country 
        setxy x y
      ]
    ]
    ; whatever the time upate hist trajs
    ask one-of cities with [city:number = id][
      set city:historical-gdp replace-item (position t runtime:dates) city:historical-gdp gdp
      set city:historical-sectors replace-item (position t runtime:dates) city:historical-sectors sectors
    ]
  ]
  
  set setup:sectors-number length [city:sector-composition] of one-of cities
  
  ask cities [set label city:name set label-color grey]
end


;;
; update link proba list - full update from scratch
; can use matrices and then flatten
to cities:compute-link-utility-matrix
  
  let orderedcities sort-on [city:number] cities
  
  let ei matrix:from-row-list (utils:list:rep (map [? -> [city:gdp] of ? ] orderedcities) (length orderedcities))
  let ej matrix:from-column-list (utils:list:rep (map [? -> [city:gdp] of ? ] orderedcities) (length orderedcities))
  let etot sum (map [? -> [city:gdp] of ? ] orderedcities)
  
  ; possibly previous links
  links:compute-network-adjacency-matrix
  let wtot sum (map sum matrix:to-row-list links:network-adjacency-matrix)
  let w matrix:make-constant (length orderedcities) (length orderedcities) 1
  if wtot > 0 [set w (matrix:map [? -> (? / wtot) ^ params:gamma-links] links:network-adjacency-matrix)]
  
  ; sector composition
  cities:compute-sector-proximity-matrix
  
  ; utility matrix
  set links:link-utilities-matrix (matrix:times-element-wise (matrix:map [? -> (? / etot) ^ params:gamma-origin] ei) (matrix:map [? -> (? / etot) ^ params:gamma-destination] ej) w (matrix:map [? -> ? ^ params:gamma-sectors] cities:sectors-proximity-matrix) (matrix:map [? -> exp (- ? / params:gravity-decay)] cities:geo-distance-matrix) (matrix:map [? -> exp (- ? / params:country-gravity-decay)] cities:soc-distance-matrix)) 
  
  ; flatten as probas ? not even needed - can draw within the matrix !

  ; do not forget to put diag at 0 to avoid self links
  foreach (utils:list:seq 0 (count cities - 1) 1) [i -> matrix:set links:link-utilities-matrix i i 0]

end



;;
; compute and set the global sector proximity matrix between cities
;  as s_{ij} = \sum_k sik sjk , can use matrix elementwise product and iterate for the sum
to cities:compute-sector-proximity-matrix
  let orderedcities sort-on [city:number] cities
  
  set cities:sectors-proximity-matrix matrix:make-constant (length orderedcities) (length orderedcities) 0
  
  foreach (utils:list:seq 0 (setup:sectors-number - 1) 1) [ k ->
    let si matrix:from-row-list (utils:list:rep (map [? -> [item k city:sector-composition] of ?] orderedcities) (length orderedcities))
    let sj matrix:from-column-list (utils:list:rep (map [? -> [item k city:sector-composition] of ?] orderedcities) (length orderedcities))
    set cities:sectors-proximity-matrix matrix:plus cities:sectors-proximity-matrix (matrix:times-element-wise si sj)
  ]
  
end




;;
; initial sector composition of cities
;  may depend on size ; possibility to add regional/spatial correlations?
to-report city:initial-sector-composition
  
  if setup:setup-type = "synthetic" [
    
    if setup:sector-composition-mode = "random" [
      ; random probabilities
      let res [] repeat setup:sectors-number [set res lput (random-float 1) res] let s sum res report (map [? -> ? / s] res)
    ]
    
    if setup:sector-composition-mode = "log-normal" [
     ; solve for mu,sigma of the log-normal as a function of gdp
      ; we aim at having a log-normal mostly in [0,1] such that
      ; (mode,variance) =  1 / K for the smallest log(E_i) and = 1/2 for the largest log(E_i)
      ;  writing
      ;  e_i = (log(E_i) - log(E_imin))/(log(E_imax) - log(E_imin)) * (1/2 - 1/K) + 1/K
      ;  this yields
      ;   (1)  mu - sigma^2 = log(e_i)
      ;   (2) -3 sigma^2 - 2 log(exp(sigma^2) - 1) = log(e_i)
      ;  => sigma^2 is the unique positive root of f(X)=0 with f(X) = -3X - 2 ln(exp(X) - 1) - ln(e_i)
      let ei ((log city:gdp 10) - (log runtime:min-gdp 10))/((log runtime:max-gdp 10) - (log runtime:min-gdp 10))*(0.5 - 1 / setup:sectors-number) + 1 / setup:sectors-number
      let f [x -> -3 * x - 2 * ln (exp(x) - 1) - ln (ei)]
      let sigma2 numanal:Brent-root f 0.0001 100
      let sigma sqrt sigma2 let mu (ln ei) + sigma2
      let lnpdf [x -> 1 / (x * sigma * sqrt (2 * pi)) * exp (- ((ln x - mu)^ 2)/(2 * sigma2))]
      let prevprobas map lnpdf (utils:list:seq (1 / setup:sectors-number) 1 (1 / setup:sectors-number))
      let s sum prevprobas
      report (map [? -> ? / s] prevprobas)
    ]
    
    
      
  ]
  
  ;; TODO
  if setup:setup-type = "real" [
    error "unimplemented"
  ]
  
end


;;
; basic constructor
to cities:new-city [number]
  setxy random-xcor random-ycor
  set shape "circle"
  ; size and color fixed in display
  
  set city:number number
  
  set city:gdp (setup:max-gdp / ((number + 1) ^ setup:scaling-exponent))
  
  ; sector updated later - need boundaries of gdp
  
end


to-report city:rescale-x [x]
  if world:envelope = 0 [report x]
  let xx ((x - item 0 world:envelope) / (item 1 world:envelope - item 0 world:envelope))*(max-pxcor - min-pxcor) + min-pxcor
  ;if xx < 0 [show x]
  report xx
end

to-report city:rescale-y [y]
  if world:envelope = 0 [report y]
  let yy ((y - item 2 world:envelope) / (item 3 world:envelope - item 2 world:envelope))*(max-pycor - min-pycor) + min-pycor
  ;if yy < 0 [show y]
  report yy
end


;;
; weighted degree of a city
to-report city:weighted-degree
  report sum [firmlink:volume] of my-firmlinks
end






