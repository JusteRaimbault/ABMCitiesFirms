

;;
; setup
to setup:setup
  
  if runtime:headless? = 0 [clear-all]
  
  setup:setup-globals
  
  setup:setup-world
  
  setup:setup-cities
  
  setup:setup-distance-matrices
  
  setup:setup-initial-network
  
  cities:compute-link-utility-matrix
  
  if runtime:headless? = 0 [
    display:setup-display
  ]
    
  reset-ticks
  
end

;;
; keep the same spatial configuration but reset the network
to setup:reset
  ; should reset city value and structure also
  ask firmlinks [die]
  random-seed setup:seed
  ; recompute utilities
  cities:compute-link-utility-matrix
  if runtime:headless? = 0 [
    display:update-display
  ]
  reset-ticks
end


;;
; globals
to setup:setup-globals
  
  ;;
  ; compatibility checks between runtime and setup
  ; TODO allow hist traj on semi-synth data
  if setup:setup-type != "real" and cities:structure-evolution-mode = "historical" [error "Historical trajectories can not be run on synthetic data"]
  
  random-seed setup:seed
  
  ;set setup:cities-file "setup/cities.csv"
  ;set setup:network-file "setup/links.csv"
  ; FUA aggreg data
  set setup:cities-file "setup/fuacities.csv"
  set setup:network-file "setup/fualinks.csv"
  
  set setup:soc-distmat-file "setup/fixedeffects.csv"
  
  set setup:countries-number 20
  set setup:max-gdp (10 ^ 11)

  set indicators:target-country-mse (list 28)
  
  ; rescaling for real distances
  set setup:region-width 4500
  set world:distance-rescaling setup:region-width / world-width
  
  ; unit link scale: will be reset to appropriate value in case of real system
  set runtime:link-size 1
  
end



;;
; setup default headless variables
to setup:setup-headless
  
  ;set setup:setup-type "synthetic"
  
  set setup:scaling-exponent 1.1
  set setup:sectors-number 50
  
  ;set runtime:final-time 1000
  
  set setup:sector-composition-mode "log-normal"
  
  set cities:structure-evolution-mode "fixed"
  
  set runtime:city-evolution-scale 10000.0 ; fixed anyway
  
end
  
  
to setup:setup-world
  ;set-patch-size 600 / setup:region-width
  ; resize so that distance primitives gives directly the distance ?
  ;resize-world 0 setup:region-width 0 setup:region-width 
  ; -> does not work as gives too much patches - distances shall be rescaled by hand
  if setup:setup-type != "real" [
    set-patch-size 3
    resize-world 0 200 0 200
    
    set setup:cities-number 700
    
  ]
  if setup:setup-type = "real" [
    ; use gis datasets
    ;; TODO reproject to the same projection as city coordinates - MUST NOT BE GEO COORDS (euclidian distances below)
    let envelope gis:load-dataset "setup/gis/envelope_wgs84.shp"
    let bbox gis:envelope-of envelope let ratio abs (item 0 bbox - item 1 bbox) / abs (item 2 bbox - item 3 bbox)   
    set-patch-size 3
    resize-world 0 round (200 * ratio) 0 200
    gis:set-world-envelope bbox
    let countries gis:load-dataset "setup/gis/europe_wgs84.shp"
    if runtime:headless? = 0 [
      gis:set-drawing-color brown gis:draw countries 1
    ]
    ;set world:envelope gis:envelope-of countries ; does not work, fucking canary islands or madere
    set world:envelope bbox
  ]
  
end


;;
; load real data
to setup:load-city-data
  set setup:cities-data but-first utils:file:read-csv setup:cities-file ";"
  ;set setup:cities-data map [? -> map [?? -> read-from-string ??] ?] setup:cities-data ; all fields are numeric ? ! no - city name
end

;;
; setup cities
to setup:setup-cities
  
  if setup:setup-type = "synthetic" or setup:setup-type = "synthetic-realsectors" or setup:setup-type = "synthetic-realsizes-realsectors" [
    let i 0
    create-cities setup:cities-number [cities:new-city i set i i + 1]
    cities:set-countries-clustering
    if setup:setup-type = "synthetic" [
      cities:setup-synthetic-sectors-composition
    ]
    if setup:setup-type = "synthetic-realsectors" or setup:setup-type = "synthetic-realsizes-realsectors" [
      setup:load-city-data
      cities:setup-real-sectors-or-size (setup:setup-type = "synthetic-realsizes-realsectors")
    ]
  ]
  
  
  
  ;; 
  if setup:setup-type = "real" [
    ; fully real setup: positions, countries, and historical trajs
    setup:load-city-data
    cities:setup-real-cities ; loads sizes and sectors
  ]
  
  
end


;;
; setup geo dist matrix, sociocultural dist matrix
;
;  - socio-cult distance matrix is set as geo distance between centroids for now
;    TODO estimate this with fixed effects on real data
to setup:setup-distance-matrices
  
  let orderedcities sort-on [cities:number] cities
  
  let xi matrix:from-row-list (utils:list:rep (map [? -> [xcor] of ?] orderedcities) (length orderedcities))
  let xj matrix:from-column-list (utils:list:rep (map [? -> [xcor] of ?] orderedcities) (length orderedcities))
  let yi matrix:from-row-list (utils:list:rep (map [? -> [ycor] of ?] orderedcities) (length orderedcities))
  let yj matrix:from-column-list (utils:list:rep (map [? -> [ycor] of ?] orderedcities) (length orderedcities))
  let dxij matrix:minus xi xj let dyij matrix:minus yi yj
  set cities:geo-distance-matrix matrix:map [? -> world:distance-rescaling * sqrt ?] (matrix:plus (matrix:times-element-wise dxij dxij) (matrix:times-element-wise dyij dyij))
  
  let countrydist table:make
  ifelse setup:setup-type != "real" [
    let countrynums remove-duplicates [city:country] of cities
    let centroids table:make
    foreach countrynums [c -> let xc mean [xcor] of cities with [city:country = c] let yc mean [ycor] of cities with [city:country = c] table:put centroids c (list xc yc)]
    ; distance between centroids    
    foreach countrynums [c1 -> let p1 patch (item 0 table:get centroids c1) (item 1 table:get centroids c1)
      foreach countrynums [c2 -> let p2 patch (item 0 table:get centroids c2) (item 1 table:get centroids c2)
        ask p1 [table:put countrydist (list c1 c2) (world:distance-rescaling * distance p2)]
      ]
    ]
  ][
    ; case of real estimated country distance
    let distdf but-first utils:file:read-csv setup:soc-distmat-file ";"
    foreach distdf [ row ->
      table:put countrydist (list (read-from-string (item 0 row)) (read-from-string (item 1 row))) (read-from-string (item 2 row))
    ]
    ;show countrydist
  ]
  let citycountries map [? -> [city:country] of ?] orderedcities let ci matrix:from-row-list (utils:list:rep citycountries (length orderedcities)) let cj matrix:from-column-list (utils:list:rep citycountries (length orderedcities))
  set cities:soc-distance-matrix (matrix:map [[c1 c2] -> table:get countrydist (list c1 c2)] ci cj)
  
  ; trick to desactivate country fixed effect mechanism: params:country-gravity-decay set to 0 <=> infty => soc-distance-matrix set to 0
  if params:country-gravity-decay = 0 [
     set params:country-gravity-decay 1
     set cities:soc-distance-matrix matrix:make-constant (length orderedcities) (length orderedcities) 0
  ]
  
end


;;
; initial network
;  - synthetic ? -> PrefAtt or similar, may be equivalent to already run the model (effect only on link history dependency)
;  - real? create ghost links with date attributes
;
; NW data file format: origin-id ; destination-id ; year ; weight
to setup:setup-initial-network
  
  if setup:setup-type = "real" [
     ; cities already have trajectories in that case-> one network for each date
    ask cities [
      let number cities:number let country city:country
       foreach runtime:dates [ year ->
        hatch-real-cities 1 [set hidden? true set cities:number number set real-city:year year set real-city:country country]
      ]
    ]
    
     let nwdata but-first utils:file:read-csv setup:network-file ";"
     set nwdata map [? -> map [?? -> read-from-string ??] ?] nwdata
     foreach nwdata [ row ->
      let year item 2 row
      let oindex -1 if table:has-key? cities:real-id-map (item 0 row) [set oindex table:get cities:real-id-map (item 0 row)]
      let dindex -1 if table:has-key? cities:real-id-map (item 1 row) [set dindex table:get cities:real-id-map (item 1 row)]
      let origin one-of real-cities with [cities:number = oindex and real-city:year = year] let destination one-of real-cities with [cities:number = dindex and real-city:year = year]
      let weight item 3 row
      if origin != nobody and destination != nobody [
        ask origin [
          if not out-real-firmlink-neighbor? destination [
            create-real-firmlink-to destination [set hidden? true set link:volume weight set real-firmlink:year year]
          ]
        ]
      ]
     ]
    
    
    if setup:with-initial-network? = true [
      ; real networks have been created -> use the one at the first date to initialize
      let t0 min runtime:dates
      ask real-firmlinks with [real-firmlink:year = t0] [
        let ro end1 let origin one-of cities with-min [distance ro] let rd end2 let destination one-of cities with-min [distance rd]
        let w link:volume
        ask origin [
          ifelse not out-firmlink-neighbor? destination [
            create-firmlink-to destination [links:new-link set link:volume w]
          ][
            ; should not have duplicates in the links file
            ask one-of (my-out-firmlinks with [end2 = destination]) [set link:volume link:volume + w]
          ]
        ]
     ]
    ]
    
    
    ; set unit link size
    let total-real-flow sum map sum matrix:to-row-list (links:adjacency-matrix real-firmlinks)
    set runtime:link-size (total-real-flow / runtime:final-time)
    
  ]
  
end


















