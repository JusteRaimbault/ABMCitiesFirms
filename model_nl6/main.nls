




;;
; one time step
;
;  TODO
;   - investigate dynamics vs stationary
;   - implement switch links / degree driven path dep
;   - indicators of path-dep ?
;   - implement copula for data driven version and compare both
to main:go
  
  if ticks mod 100 = 0 [show (word "t=" ticks)]
  
  if cities:structure-evolution-mode != "fixed" and ticks mod runtime:city-evolution-scale = 0 and ticks > 0 [
    cities:evolve-cities
  ]
    
  links:add-link
  
  if runtime:headless? = 0 [display:update-display]
  
  ;show indicators:timeseries-step
  if indicators:timeseries-step > 0 [
    if ticks mod indicators:timeseries-step = 0 [
      show (word "storing indicators")
      indicators:store-ts-indics 
    ]
  ]
  
  tick
  
  ;; dirty to use exception as control flow !!!
  ;carefully [let t runtime:current-date][stop]
  
end


;;
; 
to main:go-full-period
  repeat runtime:final-time [
    ;show ticks
    main:go
  ]
end

;;
; scenarios are: go half of the time; change parameters for interaction distance; go second half. Track indicators at time steps.
to main:go-scenario [gravity-scale-factor country-scale-factor]
  show (word "ts step: " indicators:timeseries-step)
  repeat runtime:final-time / 2 [
     main:go
  ]
  ; change parameters
  show (word "average link utility = " (mean map mean matrix:to-row-list links:link-utilities-matrix))
  set params:gravity-decay params:gravity-decay * gravity-scale-factor
  set params:country-gravity-decay params:country-gravity-decay * country-scale-factor
  ; recompute utility matrix
  cities:compute-link-utility-matrix
  show (word "average link utility after params update = " (mean map mean matrix:to-row-list links:link-utilities-matrix))
  repeat runtime:final-time / 2 [
     main:go
  ]
  show (word "average link utility at final time = " (mean map mean matrix:to-row-list links:link-utilities-matrix))
end



to-report runtime:current-date
  report item runtime:current-date-index runtime:dates
end